#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <sys/socket.h>

#define BUF_SIZE 1024
void error_handling(char *message);

int main(int argc, char *argv[]) {
    int serv_sock, clnt_sock;
    char message[BUF_SIZE];
    int str_len;
    
    struct sockaddr_in serv_adr, clnt_adr;
    socklen_t clnt_adr_sz;
    char client_ip[INET_ADDRSTRLEN];  // 클라이언트 IP를 저장할 버퍼

    if (argc != 2) {
        printf("Usage: %s <port>\n", argv[0]);
        exit(1);
    }

    // 1. 서버 소켓 생성
    serv_sock = socket(PF_INET, SOCK_STREAM, 0);
    if (serv_sock == -1)
        error_handling("socket() error");

    // 2. 주소 구조체 초기화
    memset(&serv_adr, 0, sizeof(serv_adr));
    serv_adr.sin_family = AF_INET;
    serv_adr.sin_addr.s_addr = htonl(INADDR_ANY);
    serv_adr.sin_port = htons(atoi(argv[1]));

    // 3. 소켓에 주소 바인딩
    if (bind(serv_sock, (struct sockaddr*)&serv_adr, sizeof(serv_adr)) == -1)
        error_handling("bind() error");

    // 4. 연결 대기열 설정
    if (listen(serv_sock, 5) == -1)
        error_handling("listen() error");

    printf("서버가 시작되었습니다. 클라이언트 연결 대기 중...\n");

    clnt_adr_sz = sizeof(clnt_adr);

    // 5. 무한 루프를 통해 여러 클라이언트 처리
    while (1) {
        clnt_sock = accept(serv_sock, (struct sockaddr*)&clnt_adr, &clnt_adr_sz);
        if (clnt_sock == -1)
            error_handling("accept() error");
        
        // 클라이언트 IP 출력
        inet_ntop(AF_INET, &clnt_adr.sin_addr, client_ip, sizeof(client_ip));
        printf("클라이언트 연결: %s\n", client_ip);

        // 6. 메시지 수신 및 출력
        while ((str_len = read(clnt_sock, message, BUF_SIZE)) != 0) {
            message[str_len] = '\0';  // 문자열 끝에 NULL 추가
            printf("수신한 메시지: %s\n", message);  // 수신한 메시지 출력
        }

        printf("클라이언트 연결 종료: %s\n", client_ip);
        close(clnt_sock);  // 클라이언트 소켓 닫기
    }

    close(serv_sock);  // 서버 소켓 닫기
    return 0;
}

// 에러 처리 함수
void error_handling(char *message) {
    perror(message);  // 에러 메시지와 시스템 에러 출력
    exit(1);
}
